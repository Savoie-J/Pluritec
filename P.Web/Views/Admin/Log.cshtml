@using P.Data.Models;
@using P.Web.Models;

@model Specification
@{
    ViewBag.Title = "Log";
    Log log = new Log();
    MeasurementViewModel measurement = new MeasurementViewModel();
    Layer layer = new Layer();
}

<style>
    .modal-dialog {
        width: 75%;
        padding: 0;
    }
</style>

<br />
<h3>Entries for Part Number: <span style="font-weight: bold">@Model.PartNumber</span></h3>

<p>@Html.ActionLink("Back to Admin", "Index", "Admin", null, new { @class = "btn btn-default" })</p>

<table class="table table-striped table-bordered" id="log_table">
    <thead>
        <tr>
            <th style="text-align: center">
                @Html.DisplayNameFor(model => log.LogDate)
            </th>
            <th style="text-align: center">
                @Html.DisplayNameFor(model => log.JobNumber)
            </th>
            <th style="text-align: center">
                @Html.DisplayNameFor(model => log.UploadName)
            </th>
            <th style="text-align: center">
                @Html.DisplayNameFor(model => log.Operator)
            </th>
            <th style="text-align: center">
                @Html.DisplayNameFor(model => log.Comments)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (Log item in Model.Logs)
        {
            <tr>
                <td style="text-align: center; vertical-align: middle;" data-order="@item.LogDate.ToString("yyyy-MM-dd HH:mm:ss")">
                    @item.LogDate.ToString("g")
                </td>
                <td style="text-align: center; vertical-align: middle;">
                    @Html.DisplayFor(model => item.JobNumber)
                </td>
                <td style="text-align: center; vertical-align: middle;">
                    @Html.DisplayFor(model => item.UploadName)
                </td>
                <td style="text-align: center; vertical-align: middle;">
                    @Html.DisplayFor(model => item.Operator)
                </td>
                <td style="text-align: center; vertical-align: middle;">
                    @Html.DisplayFor(model => item.Comments)
                </td>
                <td style="text-align: center; vertical-align: middle;">
                    <button type="button" class="btn btn-xs btn-primary log_measurements" data-id='@item.ID'>Measurements</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="load_modal" class="modal fade" style="z-index: 2147483647;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header no-border">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Loading...</h4>
            </div>
        </div>
    </div>
</div>

<div id="measurement_modal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body" style="padding-bottom: 0;">
                <h3>
                    Analysis Results for Layer <span style="color: #337ab7; font-weight: bold ">@Model.LayerOne</span>
                    & Layer <span style="color: #337ab7; font-weight: bold ">@Model.LayerTwo</span>
                    with a Tolerance of <span style="color: #337ab7; font-weight: bold ">@Model.Tolerance</span>.
                </h3>
                <table class="table table-bordered table-striped" id="measurement_table">
                    <thead>
                        <tr>
                            <th style="text-align: center">@Html.LabelFor(model => measurement.Time)</th>
                            <th style="text-align: center">@Html.LabelFor(model => measurement.SerialNumber)</th>
                            <th style="text-align: center">@Html.LabelFor(model => measurement.ABSposX11)</th>
                            <th style="text-align: center">@Html.LabelFor(model => measurement.ABSposY11)</th>
                            <th style="text-align: center">@Html.LabelFor(model => measurement.ABSposX12)</th>
                            <th style="text-align: center">@Html.LabelFor(model => measurement.ABSposY12)</th>
                            <th style="text-align: center">@Html.LabelFor(model => measurement.ABSposX21)</th>
                            <th style="text-align: center">@Html.LabelFor(model => measurement.ABSposY21)</th>
                            <th style="text-align: center">@Html.LabelFor(model => measurement.ABSposX22)</th>
                            <th style="text-align: center">@Html.LabelFor(model => measurement.ABSposY22)</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody style="text-align: center"></tbody>
                </table>
            </div>
            <div class="modal-footer no-border">
                <button type="button" class="btn btn-default" data-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>
</div>

<div id="layer_modal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body" style="padding-bottom: 0;">
                <h3>
                    Measurements for Serial Number <span style="color: #337ab7; font-weight: bold " id="layer_serial"></span>.
                </h3>
                <table class="table table-bordered table-striped" id="layer_table">
                    <thead>
                        <tr>
                            <th style="text-align: center">@Html.LabelFor(model => layer.NLayer)</th>
                            <th style="text-align: center">@Html.LabelFor(model => layer.ABSposX11)</th>
                            <th style="text-align: center">@Html.LabelFor(model => layer.ABSposY11)</th>
                            <th style="text-align: center">@Html.LabelFor(model => layer.ABSposX12)</th>
                            <th style="text-align: center">@Html.LabelFor(model => layer.ABSposY12)</th>
                            <th style="text-align: center">@Html.LabelFor(model => layer.ABSposX21)</th>
                            <th style="text-align: center">@Html.LabelFor(model => layer.ABSposY21)</th>
                            <th style="text-align: center">@Html.LabelFor(model => layer.ABSposX22)</th>
                            <th style="text-align: center">@Html.LabelFor(model => layer.ABSposY22)</th>
                        </tr>
                    </thead>
                    <tbody style="text-align: center"></tbody>
                </table>
            </div>
            <div class="modal-footer no-border">
                <button type="button" class="btn btn-default" data-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            $("#log_table").DataTable({
                "lengthMenu": [[-1, 10, 25, 50], ["All", 10, 25, 50]],
                "order": [[0, "desc"]]
            });

            $(".log_measurements").click(function () {
                $("#load_modal").modal('show');

                $.get(
                    '@Url.HttpRouteUrl("DefaultApi", new { controller = "Measurement", action = "GetMeasurements" })',
                    {
                        'ID': $(this).data('id')
                    },
                    function (res) {
                        $("#load_modal").modal('hide');

                        var table = $("#measurement_table").DataTable();
                        table.clear().rows.add(res).draw();

                        $("#measurement_modal").modal('show');
                    }
                );
            });

            $("#measurement_table").DataTable({
                "lengthMenu": [[-1, 10, 25, 50], ["All", 10, 25, 50]],
                "columns": [
                    {
                        "data": "time"
                    },
                    {
                        "data": "serialNumber",
                    },
                    {
                        "data": "abSposX11",
                        "render": function (data, type, row, meta) {
                            if (type !== 'display')
                                return data;

                            var result = data > @Model.Tolerance ? 'danger' : 'success';

                            return "<span class='alert-" + result + "'>" + data + "</span>";
                        }
                    },
                    {
                        "data": "abSposY11",
                        "render": function (data, type, row, meta) {
                            if (type !== 'display')
                                return data;

                            var result = data > @Model.Tolerance ? 'danger' : 'success';

                            return "<span class='alert-" + result + "'>" + data + "</span>";
                        }
                    },
                    {
                        "data": "abSposX12",
                        "render": function (data, type, row, meta) {
                            if (type !== 'display')
                                return data;

                            var result = data > @Model.Tolerance ? 'danger' : 'success';

                            return "<span class='alert-" + result + "'>" + data + "</span>";
                        }
                    },
                    {
                        "data": "abSposY12",
                        "render": function (data, type, row, meta) {
                            if (type !== 'display')
                                return data;

                            var result = data > @Model.Tolerance ? 'danger' : 'success';

                            return "<span class='alert-" + result + "'>" + data + "</span>";
                        }
                    },
                    {
                        "data": "abSposX21",
                        "render": function (data, type, row, meta) {
                            if (type !== 'display')
                                return data;

                            var result = data > @Model.Tolerance ? 'danger' : 'success';

                            return "<span class='alert-" + result + "'>" + data + "</span>";
                        }
                    },
                    {
                        "data": "abSposY21",
                        "render": function (data, type, row, meta) {
                            if (type !== 'display')
                                return data;

                            var result = data > @Model.Tolerance ? 'danger' : 'success';

                            return "<span class='alert-" + result + "'>" + data + "</span>";
                        }
                    },
                    {
                        "data": "abSposX22",
                        "render": function (data, type, row, meta) {
                            if (type !== 'display')
                                return data;

                            var result = data > @Model.Tolerance ? 'danger' : 'success';

                            return "<span class='alert-" + result + "'>" + data + "</span>";
                        }
                    },
                    {
                        "data": "abSposY22",
                        "render": function (data, type, row, meta) {
                            if (type !== 'display')
                                return data;

                            var result = data > @Model.Tolerance ? 'danger' : 'success';

                            return "<span class='alert-" + result + "'>" + data + "</span>";
                        }
                    },
                    {
                        "data": "id",
                        "render": function (data, type, row, meta) {
                            if (type !== 'display')
                                return data;

                            return "<button type='button' class='btn btn-xs btn-primary layer' data-id='" + data + "' data-serial='" + row.serialNumber + "'>Layers</button>";
                        }
                    },
                ]
            });

            $("#measurement_table").on('click', '.layer', function () {
                $("#load_modal").modal('show');

                var serialNumber = $(this).data("serial");

                $("#layer_serial").text(serialNumber);

                $.get(
                    '@Url.HttpRouteUrl("DefaultApi", new { controller = "Measurement", action = "GetLayers" })',
                    {
                        'ID': $(this).data('id')
                    },
                    function (res) {
                        $("#load_modal").modal('hide');

                        var table = $("#layer_table").DataTable();
                        table.clear().rows.add(res).draw();

                        $("#layer_modal").modal('show');
                    }
                );
            });

            $("#layer_table").DataTable({
                "lengthMenu": [[-1, 10, 25, 50], ["All", 10, 25, 50]],
                "columns": [
                    {
                        "data": "nLayer"
                    },
                    {
                        "data": "abSposX11"
                    },
                    {
                        "data": "abSposY11"
                    },
                    {
                        "data": "abSposX12"
                    },
                    {
                        "data": "abSposY12"
                    },
                    {
                        "data": "abSposX21"
                    },
                    {
                        "data": "abSposY21"
                    },
                    {
                        "data": "abSposX22"
                    },
                    {
                        "data": "abSposY22"
                    },
                ]
            });
        });
    </script>
}